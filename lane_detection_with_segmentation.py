# -*- coding: utf-8 -*-
"""lane_detection_with_segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLDMMxpgWcMaTZounFv0eJfaB9YwfmEd
"""

import cv2 
import os
import numpy as np 
import matplotlib.pyplot as plt 
input=[]
label=[]

images = []
i=0
while i in range(1731) :
    img1 = cv2.imread("/content/drive/MyDrive/train/train"+"/train"+str(i)+".jpg")
    img2 = cv2.imread("/content/drive/MyDrive/train/train"+"/test"+str(i)+".jpg")
    if img1 is not None:
      img1=cv2.resize(img1,(128,128))
      input.append(img1)
    if img2 is not None:
      img2=cv2.resize(img2,(128,128))    
      thre,b=cv2.threshold(img2, 128, 255, cv2.THRESH_BINARY)
      label.append(b)
    i+=5

from google.colab import drive
drive.mount('/content/drive')

label2=np.zeros((len(label),128,128,1))
for i in range (len(label)):
  for j in range (128):
    for k in range(128):
      label2[i][j][k]=[np.max(label[i][j][k])]

import numpy as np 
import os
import skimage.io as io
import skimage.transform as trans
import numpy as np
from keras.models import *
from keras.layers import *
from keras.optimizers import *
from keras.callbacks import ModelCheckpoint, LearningRateScheduler
from keras import backend as keras
import tensorflow as tf

def unet(pretrained_weights = None,input_size = (128,128,3)):
    inputs = Input(input_size)
    conv1 = Conv2D(16, 3, activation = 'relu', padding = 'same')(inputs)
    conv1 = Conv2D(16, 3, activation = 'relu', padding = 'same')(conv1)
    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)
    conv2 = Conv2D(32, 3, activation = 'relu', padding = 'same', )(pool1)
    conv2 = Conv2D(32, 3, activation = 'relu', padding = 'same', )(conv2)
    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)
    conv3 = Conv2D(64, 3, activation = 'relu', padding = 'same' )(pool2)
    conv3 = Conv2D(64, 3, activation = 'relu', padding = 'same')(conv3)
    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)
    conv4 = Conv2D(128, 3, activation = 'relu', padding = 'same')(pool3)
    conv4 = Conv2D(128, 3, activation = 'relu', padding = 'same')(conv4)
    drop4 = Dropout(0.5)(conv4)
    pool4 = MaxPooling2D(pool_size=(2, 2))(drop4)

    conv5 = Conv2D(256, 3, activation = 'relu', padding = 'same')(pool4)
    conv5 = Conv2D(256, 3, activation = 'relu', padding = 'same')(conv5)
    drop5 = Dropout(0.5)(conv5)

    up6 = Conv2D(128, 2, activation = 'relu', padding = 'same')(UpSampling2D(size = (2,2))(drop5))
    merge6 = concatenate([drop4,up6], axis = 3)
    conv6 = Conv2D(128, 3, activation = 'relu', padding = 'same')(merge6)
    conv6 = Conv2D(128, 3, activation = 'relu', padding = 'same')(conv6)

    up7 = Conv2D(64, 2, activation = 'relu', padding = 'same')(UpSampling2D(size = (2,2))(conv6))
    merge7 = concatenate([conv3,up7], axis = 3)
    conv7 = Conv2D(64, 3, activation = 'relu', padding = 'same')(merge7)
    conv7 = Conv2D(64, 3, activation = 'relu', padding = 'same')(conv7)

    up8 = Conv2D(32, 2, activation = 'relu', padding = 'same')(UpSampling2D(size = (2,2))(conv7))
    merge8 = concatenate([conv2,up8], axis = 3)
    conv8 = Conv2D(32, 3, activation = 'relu', padding = 'same')(merge8)
    conv8 = Conv2D(32, 3, activation = 'relu', padding = 'same')(conv8)

    up9 = Conv2D(16, 2, activation = 'relu', padding = 'same')(UpSampling2D(size = (2,2))(conv8))
    merge9 = concatenate([conv1,up9], axis = 3)
    conv9 = Conv2D(16, 3, activation = 'relu', padding = 'same')(merge9)
    conv9 = Conv2D(16, 3, activation = 'relu', padding = 'same')(conv9)
    conv9 = Conv2D(2, 3, activation = 'relu', padding = 'same')(conv9)
    conv10 = Conv2D(1, 1, activation = 'sigmoid')(conv9)

    model = Model(inputs =inputs, outputs=conv10)

    model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics=[tf.keras.metrics.MeanIoU(num_classes=2)])
    
    #model.summary()

    if(pretrained_weights):
    	model.load_weights(pretrained_weights)

    return model

model=unet(input_size=(128,128,3))

x_train=np.array(input)/255.0
y_train=np.array(label2)/255.0

model.fit(x_train,y_train,epochs=10)

# p=model.predict(np.array(input[280]).reshape(1,128,128,3))

# p.shape

# p[p>0.5]=1
# p[p<=0.5]=0

# plt.imshow(input[280])

#  plt.imshow(np.squeeze(p))

cap = cv2.VideoCapture("/content/drive/MyDrive/Lane detect test data.mp4")
test=[]
frames=[]
from google.colab.patches import cv2_imshow
i=0
while cap.isOpened():
    ret, frame = cap.read()
    if frame is None:
      break
    if frame is not None :
      img=cv2.resize(frame,(128,128))
      frames.append(img)
      pred=model.predict(img.reshape(1,128,128,3))
      pred[pred>0.5]=1
      pred[pred<0.5]=0  
      pred=(pred*255).astype(np.uint8)
      img2 = np.zeros((128,128,3)).astype(np.uint8)
      img2[:,:,0] = pred.reshape(128,128)
      img2[:,:,1] = pred.reshape(128,128)
      img2[:,:,2] = pred.reshape(128,128)
      test.append(img2)
 
     
    if cv2.waitKey(1) & 0xFF == ord('q') :
        break
    i+=1
cap.release()
cv2.destroyAllWindows()

out = cv2.VideoWriter('out.avi',cv2.VideoWriter_fourcc('M','J','P','G'), 20, (128,128))
 
for i in range (len(test)):
  t=test[i].copy()
  # mask = np.all(t == [255, 255, 255], axis = -1)
  # rows, cols = mask.nonzero()
  # r=-1
  # f=frames[i].copy()
  # if(len(rows)>=2):
  #   s=rows[0]
  #   l=rows[len(rows)//2]
  #   inds=np.where(rows==s)[0]
  #   indl=np.where(rows==l)[0]
  #   leftlane={'yu':s,'yd':l,'xu':cols[inds][0],'xd':cols[indl][0]}
  #   rightlane={'yu':s,'yd':l,'xu':cols[inds][-1],'xd':cols[indl][-1]}
  #   slopel=(leftlane['yu']-leftlane['yd'])/(leftlane['xu']-leftlane['xd'])
  #   sloper=(rightlane['yu']-rightlane['yd'])/(rightlane['xu']-rightlane['xd'])      
  #   if (slopel<0 and sloper<0):
  #     f=cv2.arrowedLine(f, (70,120), (60,120), (0,255,0), 2)  
  #   elif (slopel>0 and sloper>0):
  #     f=cv2.arrowedLine(f, (60,120), (70,120), (0,255,0), 2)  
  #   else:
  #     f=cv2.arrowedLine(f, (64,120), (64,110), (0,255,0), 2)  
  # im=cv2.addWeighted(f,1,t,0.6,0)
 
  out.write(t)  
 
out.release()

